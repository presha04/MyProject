# -*- coding: utf-8 -*-
"""Unit_4_Working_with__images_operations_slide_no_126-143.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Qzsh3p29irEu8MVXPUJC6SVJfGd5toI
"""

#Sure, here are some examples of working with images in Python using the Pillow library:

#Reading and Displaying an Image

!pip install pillow
from PIL import Image
#First, read the image using OpenCV.
from google.colab import drive
drive. mount('/content/drive')

import numpy as np
import pandas as pd
import cv2 as cv

from google.colab.patches import cv2_imshow

#Read the image
img = cv.imread('/content/drive/MyDrive/bird.jpg')

#check the type of the image
print(type(img))

#check the shape
#print(img.shape)
cv2_imshow(img)

print(img.shape)

import cv2
import matplotlib.pyplot as plt

#Read the image
img = cv.imread('/content/drive/MyDrive/bird.jpg')
from cv2 import cvtColor
from cv2 import resize

# Convert the image to grayscale
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Display the grayscale image
#cv2.imshow('Grayscale Image', gray_img)

# Display the grayscale image using Matplotlib
plt.imshow(gray_img, cmap='gray')
plt.show()

#Drawing shapes on an image using OpenCV:


# Mount Google Drive to access files
from google.colab import drive
drive.mount('/content/drive')

# Install necessary packages
!pip install opencv-python-headless
!pip install matplotlib

# Import necessary libraries
import cv2
import matplotlib.pyplot as plt

# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Check if the image was loaded correctly
if img is not None:
    # Draw a line on the image
    cv2.line(img, (100, 100), (500, 500), (0, 255, 0), thickness=3)

    # Draw a rectangle on the image
    cv2.rectangle(img, (200, 200), (600, 600), (0, 0, 255), thickness=2)

    # Draw a circle on the image
    cv2.circle(img, (400, 400), 100, (255, 0, 0), thickness=-1)

    # Display the image with the shapes drawn
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.show()
else:
    print("Image not found or could not be loaded.")

#resizing the image
# Mount Google Drive to access files
from google.colab import drive
drive.mount('/content/drive')

# Install necessary packages
!pip install opencv-python-headless

# Import necessary libraries
import cv2

# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Check if the image was loaded correctly
if img is not None:
    # Resize the image to a new size of (600, 800)
    new_size = (600, 800)
    resized_img = cv2.resize(img, new_size)

    # Display the original and resized images side by side
    import matplotlib.pyplot as plt
    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))
    axes[0].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    axes[0].set_title("Original Image")
    axes[1].imshow(cv2.cvtColor(resized_img, cv2.COLOR_BGR2RGB))
    axes[1].set_title("Resized Image")
    plt.show()
else:
    print("Image not found or could not be loaded.")

#flipping the image horizontally
# Mount Google Drive to access files
from google.colab import drive
drive.mount('/content/drive')

# Install necessary packages
!pip install opencv-python-headless
!pip install matplotlib

# Import necessary libraries
import cv2
import matplotlib.pyplot as plt

# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Check if the image was loaded correctly
if img is not None:
    # Flip the image horizontally
    flipped_img = cv2.flip(img, 1)

    # Display the original and flipped images side by side
    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))
    axes[0].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    axes[0].set_title("Original Image")
    axes[1].imshow(cv2.cvtColor(flipped_img, cv2.COLOR_BGR2RGB))
    axes[1].set_title("Flipped Image")
    plt.show()
else:
    print("Image not found or could not be loaded.")

import cv2
from google.colab.patches import cv2_imshow

# Install necessary packages
!pip install opencv-python-headless
!pip install matplotlib

# Import necessary libraries
import cv2
import matplotlib.pyplot as plt

# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Define the region of interest
x = 100
y = 100
width = 500
height = 400
roi = img[y:y+height, x:x+width]

# Display the original image and the cropped region
cv2_imshow(img)
cv2_imshow(roi)

# Save the cropped region to a file
cv2.imwrite('cropped_image.jpg', roi)

#filtering the image using gaussian filter
import cv2
from google.colab.patches import cv2_imshow

# Load the image
# Import necessary libraries
import cv2
import matplotlib.pyplot as plt

# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Apply a Gaussian filter with a kernel size of 5x5 and a standard deviation of 0
gaussian_img = cv2.GaussianBlur(img, (5, 5), 0)

# Display the original image and the filtered image
cv2_imshow(img)
cv2_imshow(gaussian_img)

# Save the filtered image to a file
cv2.imwrite('gaussian_image.jpg', gaussian_img)

import cv2
from google.colab.patches import cv2_imshow

# Load the image
# Import necessary libraries
import cv2
import matplotlib.pyplot as plt

# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Convert the image to grayscale
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Perform Canny edge detection with a lower threshold of 100 and an upper threshold of 200
edges = cv2.Canny(gray_img, 100, 200)

# Display the original image and the edges
cv2_imshow(img)
cv2_imshow(edges)

import cv2
from google.colab.patches import cv2_imshow

# Load the image
# Load an image from Google Drive
img_path = '/content/drive/MyDrive/bird.jpg'
img = cv2.imread(img_path)

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Initialize the SIFT detector
sift = cv2.xfeatures2d.SIFT_create()

# Detect keypoints and compute descriptors
keypoints, descriptors = sift.detectAndCompute(gray, None)

# Draw keypoints on the image
img_with_keypoints = cv2.drawKeypoints(img, keypoints, None)

# Display the original image and the image with keypoints
cv2_imshow(img)
cv2_imshow(img_with_keypoints)

# Print the number of detected keypoints
print('Number of keypoints:', len(keypoints))

